name: Build OpenWrt Firmware for PHICOMM K2P

on:
  repository_dispatch:
  workflow_dispatch:
  release:
    types: [ published ]

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_FEED_SCRIPT: diy-feed.sh
  DIY_CONFIG_SCRIPT: diy-config.sh
  UPLOAD_BIN: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    name: Build
    runs-on: ubuntu-18.04
    defaults:
      run:
        working-directory: phicomm-k2p

    if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "$TZ"

      - name: Download source code
        run: git clone $REPO_URL -b $REPO_BRANCH openwrt

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_FEED_SCRIPT
          cd openwrt
          $RUNNER_WORKSPACE/$DIY_FEED_SCRIPT

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_CONFIG_SCRIPT
          cd openwrt
          $RUNNER_WORKSPACE/$DIY_CONFIG_SCRIPT

      - name: Generate configuration file
        run: cd openwrt && make defconfig

      - name: Download package
        run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec ls -lh {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          cd openwrt
          echo -e "Compile with $(nproc) thread(s)"
          make -j$(nproc) || make -j1 || make -j1 V=s

      - name: Check space usage
        run: |
          df -h
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        if: success()
        run: |
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

      - name: Upload bin directory
        uses: actions/upload-artifact@v2
        if: success() && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: openwrt_bin_for_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Upload firmware directory
        if: success() && env.UPLOAD_FIRMWARE == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}

      - name: Bark Notify
        if: always()
        uses: shink/bark-action@v1
        with:
          key: ${{ secrets.BARK_KEY }}
          title: Compilation work is over
